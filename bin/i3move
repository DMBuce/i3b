#!/usr/bin/perl
# requires perl, xrandr, xdotool

use strict;
use warnings;

use Getopt::Long qw(:config no_ignore_case);

# get X11 properties of active window
#
# returns hash with integer keys: id, x, y, width, height, screen
sub activewindow {
	my %window = ();
	for my $line (
		split(/[\r\n]+/, `xdotool getactivewindow getwindowgeometry --shell`)
	) {
		my ($key, $val) = ( $line =~ /([^=]*)=(.*)/ );
		$key = "id" if $key eq "window";
		$window{lc $key} = $val;
	}
	return %window;
}

# get properties of monitors that neighbor a window
#
# param 1: hash of window properties with keys: x, y, width, height
# returns hash: {
# 	up      => 0 or $window
# 	down    => 0 or $window
# 	left    => 0 or $window
# 	right   => 0 or $window
# 	here    => 0 or $window
# 	nearest => $window
# 	all     => $window
# }
# where $window is a hash of monitor properties with keys: x, y, width, height
sub getmonitors {
	my (%window) = @_;
	my %monitors = ( up => 0, down => 0, left => 0, right => 0, here => 0 );
	my ($x, $y) = ($window{x} + $window{width}/2, $window{y} + $window{height}/2);
	for my $line ( split(/[\r\n]+/, `xrandr -q --screen $window{screen}`) ) {
		if ($line =~ /^Screen .*current (\d+) x (\d+)/) {
			$monitors{all}
				= { width => $1, height => $2, x => 0, y => 0 };
		} elsif ($line =~ /\sconnected.*?(\d+)x(\d+)\+(\d+)\+(\d+)/) {
			# $1: monitor width
			# $2: monitor height
			# $3: x offset
			# $4: y offset
			if ($x >= $3 and $x < $3 + $1 and $y >= $4 and $y < $4 + $2) {
				# active window is on this monitor
				$monitors{here}
					= { width => $1, height => $2, x => $3, y => $4 };
			} elsif ($x >= $3 and $x < $3 + $1 and $y >= $4) {
				# monitor is somewhere above active window
				if (not $monitors{up} or $4 > $monitors{up}{y}) {
					# monitor is nearer than others we've seen, so save it
					$monitors{up}
						= { width => $1, height => $2, x => $3, y => $4 };
				}
			} elsif ($x >= $3 and $x < $3 + $1 and $y < $4 + $2) {
				# monitor is somewhere below active window
				if (not $monitors{down} or $4 < $monitors{down}{y}) {
					# monitor is nearer than others we've seen, so save it
					$monitors{down}
						= { width => $1, height => $2, x => $3, y => $4 };
				}
			} elsif ($y >= $4 and $y < $4 + $2 and $x >= $3) {
				# monitor is somewhere left of active window
				if (not $monitors{left} or $3 > $monitors{left}{x}) {
					# monitor is nearer than others we've seen, so save it
					$monitors{left}
						= { width => $1, height => $2, x => $3, y => $4 };
				}
			} elsif ($y >= $4 and $y < $4 + $2 and $x < $3 + $1) {
				# monitor is somewhere right of active window
				if (not $monitors{right} or $3 < $monitors{right}{x}) {
					# monitor is nearer than others we've seen, so save it
					$monitors{right}
						= { width => $1, height => $2, x => $3, y => $4 };
				}
			}
		}
	}

	# find monitor nearest to active window
	for my $k ("here", "up", "down", "left", "right") {
		if ($monitors{$k}) {
			$monitors{nearest} = $monitors{$k};
			last;
		}
	}

	return %monitors
}

# default options
my %options = (
	margins   => [],
	title     => 26,
	border    => 3,
	threshold => "33%%",
	small     => "=",
	large     => "3",
	inside    => "w",
	outside   => "-17px",
	snap      => 1,
	hide      => 1,
	clamp     => 0,
	compound  => 1,
	passthru  => 1,
	gen       => 0,
	man       => 0,
	help      => 0,
);

# read options from environment
if ($ENV{I3MOVE_OPTIONS}) {
	@ARGV = (split(/\s+/, $ENV{I3MOVE_OPTIONS}), @ARGV);
}

# read options from config
my $configdir = $ENV{XDG_CONFIG_HOME} ? $ENV{XDG_CONFIG_HOME} : "$ENV{HOME}/.config";
my $fh;
for my $file (
	"$configdir/i3move",
	"$configdir/i3/move",
	"$ENV{HOME}/.i3move",
) {
	open $fh, '<', $file or next;
	my $config = do { local $/; <$fh> };
	@ARGV = (split(/\s+/, $config), @ARGV);
	last;
}

# parse options
my $result = GetOptions(
	"border|b=i"           => \$options{border},
	"clamp|C!"             => \$options{clamp},
	"gen|g"                => \$options{gen},
	"hide|H!"              => \$options{hide},
	"inside-distance|i=s"  => \$options{inside},
	"large-distance|l=s"   => \$options{large},
	"margins|m=i{1,4}"     => \@{$options{margins}},
	"compound-display|M!"  => \$options{compound},
	"outside-distance|o=s" => \$options{outside},
	"passthru|P!"          => \$options{passthru},
	"small-distance|s=s"   => \$options{small},
	"snap|S!"              => \$options{snap},
	"title|t=i"            => \$options{title},
	"threshold|T=s"        => \$options{threshold},
	"help|h|?"             => \$options{help},
);

# check options
my $prog = (split(/\//,$0))[-1];
my $usg = <<EOF;
Usage: $prog [options] up|down|left|right
       $prog [options] north|south|east|west
       $prog [options] top|bottom|port|starboard

    Move a floating i3 window up, down, left, or right. The distance
    moved is chosen based on the window's size and position. If the active
    window is tiled, i3move will move it with 'i3-msg move' instead.

EOF
my $usage = $usg . <<EOF;
Options:

    -t, --title <size>         The size of i3's title bar in pixels.
    -b, --border <size>        The size of i3's bottom, left, and
                               right window borders in pixels
    -m, --margins <m1> [m2] [m3] [m4]
                               The width of margins along the top,
                               bottom, left, and right of the screen.
    -i, --inside-distance <distance>
                               The distance to move when inside the
                               margins. Format is \\<|\\>|w|N[px|%|%%]
    -o, --outside-distance <distance>
                               The distance to move when outside the
                               margins. Format is \\<|\\>|w|N[px|%|%%]
    -s, --small-distance <distance>
                               The distance to move small windows.
                               Format is \\<|\\>|w|N[px|%|%%]
    -l, --large-distance <distance>
                               The distance to move large windows.
                               Format is \\<|\\>|w|N[px|%|%%]
    -T, --threshold N[px|%%]   Window size threshole for -s and -l.
    -C, --clamp, --no-clamp    Enable or disable clamping to margin edges.
    -S, --snap, --no-snap      Enable or disable snapping to margin edges.
    -H, --hide, --no-hide      Enable or disable hiding when snapped.
    -P, --passthru, --no-passthru
                               Enable or disable moving tiled windows
                               with i3-msg.
    -g, --gen                  Generate defaults for -t, -b, and -m.
    --help                     Show this help message and exit.

EOF
if (not $result or $options{help}) {
	die $usage;
# generate config
} elsif ($options{gen}) {
	# switch to temp workspace and launch a terminal
	system("i3-msg workspace tmp.i3move >/dev/null");
	system("i3-sensible-terminal >/dev/null &");
	sleep 1;

	# make sure window is tiled and get its properties
	system("i3-msg floating disable >/dev/null");
	my %pos1 = activewindow();

	# find monitors
	my %monitors = getmonitors(%pos1);

	# make window floating and get properties of new position
	system("i3-msg floating enable >/dev/null");
	my %pos2 = activewindow();

	# move window and get properties of new position
	system("i3-msg move position $pos2{x} $pos2{y} >/dev/null");
	my %pos3 = activewindow();

	# kill window, return to previous workspace
	system("i3-msg kill >/dev/null");
	system("i3-msg workspace back_and_forth >/dev/null");

	# compute the widths of the window borders, window title, and margins
	my $b = $pos3{x} - $pos2{x};
	my $t = $pos3{y} - $pos2{y};
	my %m = (
		top    => $pos1{y} - $t,
		bottom => $monitors{here}{height} - $pos1{height} - $pos1{y},
		left   => $pos1{x},
		right  => $monitors{here}{width} - $pos1{width} - $pos1{x},
	);

	# figure out what i3's hide_edge_borders config is set to
	my $hide_edge_borders = "none";
	for my $line ( split(/[\r\n]+/, `i3-msg -t get_config`) ) {
		if ($line =~ /^\s*hide_edge_borders\s+(\S*)/) {
			$hide_edge_borders = $1;
		}
	}

	# adjust margins based on hide_edge_borders setting
	$m{bottom} -= $b if $hide_edge_borders =~ /^(both|vertical)$/;
	$m{left}   -= $b if $hide_edge_borders =~ /^(both|horizontal)$/;
	$m{right}  -= $b if $hide_edge_borders =~ /^(both|horizontal)$/;

	# figure out outside distance
	my $o = int( ($m{top} - $m{bottom}) / 2 );
	$o *= -1 if $o < 0;
	$o += 1 if $o == 0;

	# print dimensions plus default options and exit
	print "--title $t\n";
	print "--border $b\n";
	print "--margins $m{top} $m{bottom} $m{left} $m{right}\n";
	print "--inside-distance $options{inside}\n";
	print "--outside-distance -${o}px\n";
	print "--small-distance $options{small}\n";
	print "--large-distance $options{large}\n";
	print "--threshold $options{threshold}\n";
	print $options{clamp}    ? "--clamp\n"            : "--no-clamp\n";
	print $options{snap}     ? "--snap\n"             : "--no-snap\n";
	print $options{hide}     ? "--hide\n"             : "--no-hide\n";
	print $options{compound} ? "--compound-display\n" : "--no-compound-display\n";
	print $options{passthru} ? "--passthru\n"         : "--no-passthru\n";
	exit;
}

# check params
if (not @ARGV == 1) {
	die $usg;
}

# parse params
my $direction = $ARGV[0];
if ($direction =~ /^(top|north)$/) {
	$options{inside} = "2";
	$direction = "up";
} elsif ($direction =~ /^(bottom|south)$/) {
	$options{inside} = "2";
	$direction = "down";
} elsif ($direction =~ /^(port|west)$/) {
	$options{inside} = "2";
	$direction = "left";
} elsif ($direction =~ /^(starboard|east)$/) {
	$options{inside} = "2";
	$direction = "right";
} elsif (not $direction =~ /^(up|down|left|right)$/) {
	warn "Invalid direction: $direction\n";
	die $usg;
}

# figure out whether the active window is tiled or floating
my $window_id = `xdotool getactivewindow`;
chomp $window_id;
if ( system("i3-msg '[con_id=\"__focused__\" floating]' focus >/dev/null 2>&1") ) {
	exit if not $options{passthru};
	exec "i3-msg move $direction >/dev/null";
}

# get properties of active window: id, x, y, width, height, screen
my %window = activewindow();

# convert X11 numbers to i3 numbers
$window{x} -= $options{border};
$window{y} -= $options{title};
$window{width} += 2*$options{border};
$window{height} += $options{title} + $options{border};

# find monitors
my %monitors = getmonitors(%window);

## debug
#use Data::Dumper;
#print Dumper( \$monitors{nearest} );
##__END__

# figure out which axis to use
my ($z, $length, $LENGTH, %margins);
if ($direction eq "up" or $direction eq "down") {
	$z = $options{compound} ? $window{y} - $monitors{nearest}{y} : $window{y};
	$length = $window{height};
	$LENGTH = $options{compound} ? $monitors{nearest}{height} : $monitors{all}{height};
	%margins = (
		near => ($options{margins}[0] or 0),
		far  => ($options{margins}[1] or 0),
	);
} else {
	$z = $options{compound} ? $window{x} - $monitors{nearest}{x} : $window{x};
	$length = $window{width};
	$LENGTH = $options{compound} ? $monitors{nearest}{width} : $monitors{all}{width};
	%margins = (
		near => ($options{margins}[2] or 0),
		far  => ($options{margins}[3] or 0),
	);
}

# figure out threshold
my $threshold;
if ($options{threshold} =~ /^(\d+)(px)?$/) {
	$threshold = $1;
} elsif ($options{threshold} =~ /^(\d+)%%$/) {
	$threshold = $1 / 100 * ( $LENGTH - $margins{near} - $margins{far} );
} else {
	die "Invalid threshold: $options{threshold}\n";
}

# parse step size from distance options
my $n;
my %dist = ();
for my $k ("small", "large", "inside", "outside") {
	my $spec = $options{$k};
	if ($spec =~ /^(<|>|=)$/) {
		$n = int(( $LENGTH - $length - $margins{near} - $margins{far} ) / $length );
		$n += 1 if $spec eq "<";
		$n += 1 if $spec eq "=" and not $n%2 == 0;
		$n += 1 if $n == 0;
		$dist{$k} = int(( $LENGTH - $length - $margins{near} - $margins{far} ) / $n ) + 1;
	} elsif ($spec =~ /^(\d+)$/) {
		$n = $1 - 1;
		$n += 1 if $n == 0;
		$dist{$k} = int(( $LENGTH - $length - $margins{near} - $margins{far} ) / $n ) + 1;
	} elsif ($spec =~ /^(-?\d+)%$/) {
		$dist{$k} = int( $1 / 100 * $length );
		$dist{$k} += $length if $dist{$k} < 0;
		$dist{$k} *= -1 if $dist{$k} < 0;
	} elsif ($spec =~ /^(-?\d+)%%$/) {
		$dist{$k} = int( $1 / 100 * $LENGTH );
		$dist{$k} += $length if $dist{$k} < 0;
		$dist{$k} *= -1 if $dist{$k} < 0;
	} elsif ($spec =~ /^(-?\d+)px$/) {
		$dist{$k} = int( $1 );
		$dist{$k} += $length if $dist{$k} < 0;
		$dist{$k} *= -1 if $dist{$k} < 0;
	} elsif ($spec =~ /^(w)$/ and $k =~ /^(inside|outside)$/) {
		$dist{$k} = "w";
	} else {
		die "Invalid $k distance: $spec\n";
	}
}

# resolve symbolic "w" distances
for my $k ("inside", "outside") {
	if ($dist{$k} eq "w") {
		$dist{$k} = $length < $threshold ? $dist{small} : $dist{large};
	}
}

# figure out move distance
my $dz;
# window is inside margins
if ($z > $margins{near} and $z + $length < $LENGTH - $margins{far}) {
	$dz = $dist{inside};

	# snap or clamp move distance if necessary
	if ($options{snap} or $options{clamp}) {
		if ($direction eq "up" or $direction eq "left") {
			if ($z - $dz < $margins{near}) {
				$dz = $z - $margins{near};
			}
		} else {
			if ($z + $length + $dz > $LENGTH - $margins{far}) {
				$dz = $LENGTH - $margins{far} - ($z + $length);
			}
		}
	}
# window is at edge of near margin
} elsif ($z == $margins{near}) {
	if ($direction eq "down" or $direction eq "right") {
		$dz = $dist{inside};

		# snap or clamp move distance if necessary
		if ($options{snap} or $options{clamp}) {
			if ($z + $length + $dz > $LENGTH - $margins{far}) {
				$dz = $LENGTH - $margins{far} - ($z + $length);
			}
		}
	} elsif ($options{compound} and $monitors{$direction}) {
		$dz = 2*$margins{near} + $length;
	} elsif ($options{clamp}) {
		$dz = 0;
	} elsif ($options{hide}) {
		$dz = $dist{outside} + $margins{near};
	} else {
		$dz = $dist{outside};
	}
# window is at edge of far margin
} elsif ($z + $length == $LENGTH - $margins{far}) {
	if ($direction eq "up" or $direction eq "left") {
		$dz = $dist{inside};

		# snap or clamp move distance if necessary
		if ($options{snap} or $options{clamp}) {
			if ($z - $dz < $margins{near}) {
				$dz = $z - $margins{near};
			}
		}
	} elsif ($options{compound} and $monitors{$direction}) {
		$dz = 2*$margins{far} + $length;
	} elsif ($options{clamp}) {
		$dz = 0;
	} elsif ($options{hide}) {
		$dz = $dist{outside} + $margins{far};
	} else {
		$dz = $dist{outside};
	}
# window is overlapping margins
} else {
	if ($options{compound} and $monitors{$direction} and $monitors{here}) {
		$dz = $dist{inside};
	} elsif ($options{hide} and $z == -$dist{outside}) {
		$dz = $dist{outside} + $margins{near};
	} elsif ($options{hide} and $z + $length == $LENGTH + $dist{outside}) {
		$dz = $dist{outside} + $margins{far};
	} else {
		$dz = $dist{outside};
	}
}

# move in chosen direction
exec "i3-msg move $direction $dz >/dev/null";

